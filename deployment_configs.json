{
  "docker-compose.production.yml": "version: '3.8'\n\nservices:\n  # MongoDB with replica set for production\n  mongodb:\n    image: mongo:7\n    container_name: designstudio-mongodb\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}\n      MONGO_INITDB_DATABASE: designstudio\n      MONGO_REPLICA_SET_NAME: rs0\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n      - ./docker/mongodb/mongod.conf:/etc/mongod.conf\n      - ./docker/mongodb/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js\n    command: [\"--replSet\", \"rs0\", \"--bind_ip_all\", \"--keyFile\", \"/etc/mongodb-keyfile\"]\n    networks:\n      - designstudio-network\n\n  # Redis Cluster for high availability\n  redis-master:\n    image: redis:7-alpine\n    container_name: designstudio-redis-master\n    restart: unless-stopped\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_master_data:/data\n      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf\n    command: redis-server /usr/local/etc/redis/redis.conf\n    networks:\n      - designstudio-network\n\n  redis-slave:\n    image: redis:7-alpine\n    container_name: designstudio-redis-slave\n    restart: unless-stopped\n    ports:\n      - \"6380:6379\"\n    volumes:\n      - redis_slave_data:/data\n    command: redis-server --slaveof redis-master 6379\n    depends_on:\n      - redis-master\n    networks:\n      - designstudio-network\n\n  # Backend API instances (load balanced)\n  backend-1:\n    build:\n      context: ./packages/backend\n      dockerfile: Dockerfile.production\n    container_name: designstudio-backend-1\n    restart: unless-stopped\n    environment:\n      NODE_ENV: production\n      PORT: 3000\n      INSTANCE_ID: backend-1\n      DATABASE_URL: ${DATABASE_URL}\n      REDIS_MASTER_URL: redis://redis-master:6379\n      REDIS_SLAVE_URL: redis://redis-slave:6379\n      JWT_SECRET: ${JWT_SECRET}\n      SUPABASE_URL: ${SUPABASE_URL}\n      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}\n      AWS_S3_BUCKET: ${AWS_S3_BUCKET}\n      AWS_REGION: ${AWS_REGION}\n    depends_on:\n      - mongodb\n      - redis-master\n    networks:\n      - designstudio-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  backend-2:\n    build:\n      context: ./packages/backend\n      dockerfile: Dockerfile.production\n    container_name: designstudio-backend-2\n    restart: unless-stopped\n    environment:\n      NODE_ENV: production\n      PORT: 3000\n      INSTANCE_ID: backend-2\n      DATABASE_URL: ${DATABASE_URL}\n      REDIS_MASTER_URL: redis://redis-master:6379\n      REDIS_SLAVE_URL: redis://redis-slave:6379\n      JWT_SECRET: ${JWT_SECRET}\n      SUPABASE_URL: ${SUPABASE_URL}\n      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}\n      AWS_S3_BUCKET: ${AWS_S3_BUCKET}\n      AWS_REGION: ${AWS_REGION}\n    depends_on:\n      - mongodb\n      - redis-master\n    networks:\n      - designstudio-network\n\n  # Web PWA\n  web:\n    build:\n      context: ./packages/web\n      dockerfile: Dockerfile.production\n    container_name: designstudio-web\n    restart: unless-stopped\n    environment:\n      VITE_API_URL: https://api.designstudio.com\n      VITE_WS_URL: wss://api.designstudio.com\n      VITE_SUPABASE_URL: ${SUPABASE_URL}\n      VITE_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}\n    networks:\n      - designstudio-network\n\n  # Nginx Load Balancer\n  nginx:\n    image: nginx:alpine\n    container_name: designstudio-nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf\n      - ./docker/nginx/ssl:/etc/nginx/ssl\n      - ./docker/nginx/logs:/var/log/nginx\n    depends_on:\n      - backend-1\n      - backend-2\n      - web\n    networks:\n      - designstudio-network\n\n  # Monitoring Stack\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: designstudio-prometheus\n    restart: unless-stopped\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    networks:\n      - designstudio-network\n\n  grafana:\n    image: grafana/grafana:latest\n    container_name: designstudio-grafana\n    restart: unless-stopped\n    ports:\n      - \"3001:3000\"\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards\n      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources\n    networks:\n      - designstudio-network\n\n  # Log aggregation\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0\n    container_name: designstudio-elasticsearch\n    restart: unless-stopped\n    environment:\n      - discovery.type=single-node\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - xpack.security.enabled=false\n    volumes:\n      - elasticsearch_data:/usr/share/elasticsearch/data\n    networks:\n      - designstudio-network\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:8.11.0\n    container_name: designstudio-logstash\n    restart: unless-stopped\n    volumes:\n      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n    depends_on:\n      - elasticsearch\n    networks:\n      - designstudio-network\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.11.0\n    container_name: designstudio-kibana\n    restart: unless-stopped\n    ports:\n      - \"5601:5601\"\n    environment:\n      ELASTICSEARCH_HOSTS: http://elasticsearch:9200\n    depends_on:\n      - elasticsearch\n    networks:\n      - designstudio-network\n\nvolumes:\n  mongodb_data:\n  redis_master_data:\n  redis_slave_data:\n  prometheus_data:\n  grafana_data:\n  elasticsearch_data:\n\nnetworks:\n  designstudio-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n",
  "docker/nginx/nginx.prod.conf": "user nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # Logging\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                   '$status $body_bytes_sent \"$http_referer\" '\n                   '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n\n    # Performance settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 100M;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;\n\n    # Upstream backend servers\n    upstream backend {\n        least_conn;\n        server backend-1:3000 max_fails=3 fail_timeout=30s;\n        server backend-2:3000 max_fails=3 fail_timeout=30s;\n        keepalive 32;\n    }\n\n    # SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header X-Frame-Options DENY always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:;\" always;\n\n    # Main server block\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name designstudio.com www.designstudio.com;\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        listen [::]:443 ssl http2;\n        server_name designstudio.com www.designstudio.com;\n\n        ssl_certificate /etc/nginx/ssl/fullchain.pem;\n        ssl_certificate_key /etc/nginx/ssl/privkey.pem;\n\n        # API endpoints\n        location /api/ {\n            limit_req zone=api burst=20 nodelay;\n\n            proxy_pass http://backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_cache_bypass $http_upgrade;\n            proxy_read_timeout 300s;\n            proxy_connect_timeout 75s;\n        }\n\n        # WebSocket connections\n        location /socket.io/ {\n            limit_req zone=websocket burst=10 nodelay;\n\n            proxy_pass http://backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 86400s;\n            proxy_send_timeout 86400s;\n        }\n\n        # Static files with caching\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n            add_header Vary Accept-Encoding;\n\n            proxy_pass http://web:80;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        # PWA routes\n        location / {\n            proxy_pass http://web:80;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # PWA support\n            location ~* \\.(html|json|js)$ {\n                add_header Cache-Control \"no-cache, no-store, must-revalidate\";\n                add_header Pragma \"no-cache\";\n                add_header Expires \"0\";\n            }\n        }\n\n        # Health check endpoint\n        location /health {\n            access_log off;\n            return 200 \"healthy\\n\";\n            add_header Content-Type text/plain;\n        }\n    }\n}",
  "kubernetes/namespace.yaml": "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: designstudio\n  labels:\n    name: designstudio\n    environment: production\n",
  "kubernetes/mongodb-deployment.yaml": "apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mongodb\n  namespace: designstudio\nspec:\n  serviceName: mongodb-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:7\n        ports:\n        - containerPort: 27017\n        env:\n        - name: MONGO_INITDB_ROOT_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: mongodb-secret\n              key: username\n        - name: MONGO_INITDB_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mongodb-secret\n              key: password\n        volumeMounts:\n        - name: mongodb-persistent-storage\n          mountPath: /data/db\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n  volumeClaimTemplates:\n  - metadata:\n      name: mongodb-persistent-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 50Gi\n      storageClassName: ssd\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongodb-service\n  namespace: designstudio\nspec:\n  selector:\n    app: mongodb\n  ports:\n  - port: 27017\n    targetPort: 27017\n  clusterIP: None\n",
  "kubernetes/backend-deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\n  namespace: designstudio\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: designstudio/backend:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: database-url\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: redis-url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: jwt-secret\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\n  namespace: designstudio\nspec:\n  selector:\n    app: backend\n  ports:\n  - port: 3000\n    targetPort: 3000\n  type: ClusterIP\n",
  "terraform/main.tf": "terraform {\n  required_version = \">= 1.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"~> 2.0\"\n    }\n  }\n\n  backend \"s3\" {\n    bucket = \"designstudio-terraform-state\"\n    key    = \"prod/terraform.tfstate\"\n    region = \"us-east-1\"\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# VPC and Networking\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"designstudio-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = true\n  enable_vpn_gateway = false\n  enable_dns_hostnames = true\n  enable_dns_support = true\n\n  tags = {\n    Environment = \"production\"\n    Project     = \"designstudio\"\n  }\n}\n\n# EKS Cluster\nmodule \"eks\" {\n  source = \"terraform-aws-modules/eks/aws\"\n\n  cluster_name    = \"designstudio-cluster\"\n  cluster_version = \"1.28\"\n\n  vpc_id     = module.vpc.vpc_id\n  subnet_ids = module.vpc.private_subnets\n\n  node_groups = {\n    main = {\n      desired_capacity = 3\n      max_capacity     = 10\n      min_capacity     = 1\n\n      instance_types = [\"t3.medium\"]\n\n      k8s_labels = {\n        Environment = \"production\"\n        Application = \"designstudio\"\n      }\n    }\n  }\n\n  tags = {\n    Environment = \"production\"\n    Project     = \"designstudio\"\n  }\n}\n\n# RDS MongoDB DocumentDB\nresource \"aws_docdb_cluster\" \"main\" {\n  cluster_identifier      = \"designstudio-docdb\"\n  engine                  = \"docdb\"\n  master_username         = var.docdb_username\n  master_password         = var.docdb_password\n  backup_retention_period = 7\n  preferred_backup_window = \"07:00-09:00\"\n  skip_final_snapshot     = false\n\n  vpc_security_group_ids = [aws_security_group.docdb.id]\n  db_subnet_group_name   = aws_docdb_subnet_group.main.name\n\n  tags = {\n    Environment = \"production\"\n    Project     = \"designstudio\"\n  }\n}\n\nresource \"aws_docdb_cluster_instance\" \"cluster_instances\" {\n  count              = 3\n  identifier         = \"designstudio-docdb-${count.index}\"\n  cluster_identifier = aws_docdb_cluster.main.id\n  instance_class     = \"db.t3.medium\"\n}\n\n# ElastiCache Redis\nresource \"aws_elasticache_replication_group\" \"main\" {\n  replication_group_id       = \"designstudio-redis\"\n  description                = \"Redis cluster for DesignStudio\"\n\n  node_type                  = \"cache.t3.micro\"\n  port                       = 6379\n  parameter_group_name       = \"default.redis7\"\n\n  num_cache_clusters         = 3\n  automatic_failover_enabled = true\n  multi_az_enabled          = true\n\n  subnet_group_name = aws_elasticache_subnet_group.main.name\n  security_group_ids = [aws_security_group.redis.id]\n\n  tags = {\n    Environment = \"production\"\n    Project     = \"designstudio\"\n  }\n}\n\n# S3 Bucket for assets\nresource \"aws_s3_bucket\" \"assets\" {\n  bucket = \"designstudio-assets-${random_id.bucket_suffix.hex}\"\n\n  tags = {\n    Environment = \"production\"\n    Project     = \"designstudio\"\n  }\n}\n\nresource \"aws_s3_bucket_cors_configuration\" \"assets\" {\n  bucket = aws_s3_bucket.assets.id\n\n  cors_rule {\n    allowed_headers = [\"*\"]\n    allowed_methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\"]\n    allowed_origins = [\"https://designstudio.com\", \"https://app.designstudio.com\"]\n    max_age_seconds = 3000\n  }\n}\n\n# CloudFront CDN\nresource \"aws_cloudfront_distribution\" \"main\" {\n  origin {\n    domain_name = aws_s3_bucket.assets.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.assets.bucket}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path\n    }\n  }\n\n  enabled = true\n  comment = \"DesignStudio CDN\"\n\n  default_cache_behavior {\n    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = \"S3-${aws_s3_bucket.assets.bucket}\"\n\n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 3600\n    max_ttl                = 86400\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    cloudfront_default_certificate = true\n  }\n\n  tags = {\n    Environment = \"production\"\n    Project     = \"designstudio\"\n  }\n}\n\n# Variables\nvariable \"aws_region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-east-1\"\n}\n\nvariable \"docdb_username\" {\n  description = \"DocumentDB master username\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"docdb_password\" {\n  description = \"DocumentDB master password\"\n  type        = string\n  sensitive   = true\n}\n\n# Random ID for unique resource naming\nresource \"random_id\" \"bucket_suffix\" {\n  byte_length = 4\n}",
  ".env.production.example": "# Production Environment Variables\n\n# Database\nDATABASE_URL=\"mongodb://username:password@docdb-cluster.region.docdb.amazonaws.com:27017/designstudio?ssl=true&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false\"\n\n# Redis Cache\nREDIS_URL=\"redis://designstudio-redis.cache.amazonaws.com:6379\"\n\n# Authentication\nJWT_SECRET=\"your-super-secure-jwt-secret-key\"\nJWT_EXPIRES_IN=\"7d\"\nREFRESH_TOKEN_EXPIRES_IN=\"30d\"\n\n# Supabase\nSUPABASE_URL=\"https://your-project.supabase.co\"\nSUPABASE_ANON_KEY=\"your-supabase-anon-key\"\nSUPABASE_SERVICE_ROLE_KEY=\"your-supabase-service-role-key\"\n\n# AWS Services\nAWS_ACCESS_KEY_ID=\"your-aws-access-key\"\nAWS_SECRET_ACCESS_KEY=\"your-aws-secret-key\"\nAWS_REGION=\"us-east-1\"\nAWS_S3_BUCKET=\"designstudio-assets-prod\"\nAWS_CLOUDFRONT_DOMAIN=\"d123456789.cloudfront.net\"\n\n# File Upload\nMAX_FILE_SIZE=\"50MB\"\nALLOWED_FILE_TYPES=\"image/jpeg,image/png,image/svg+xml,image/webp\"\n\n# Email Service (SendGrid/SES)\nEMAIL_FROM=\"noreply@designstudio.com\"\nEMAIL_API_KEY=\"your-email-service-api-key\"\n\n# WebSocket\nWEBSOCKET_PORT=3001\nWEBSOCKET_PATH=\"/socket.io\"\n\n# CORS\nCORS_ORIGIN=\"https://designstudio.com,https://app.designstudio.com\"\n\n# Rate Limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\n\n# Monitoring\nSENTRY_DSN=\"your-sentry-dsn\"\nLOG_LEVEL=\"info\"\n\n# SSL/Security\nSSL_CERT_PATH=\"/etc/ssl/certs/fullchain.pem\"\nSSL_KEY_PATH=\"/etc/ssl/private/privkey.pem\"\n\n# Performance\nNODE_ENV=\"production\"\nPORT=3000\nCLUSTER_WORKERS=4\n\n# Feature Flags\nENABLE_VOICE_CHAT=true\nENABLE_VIDEO_CHAT=true\nENABLE_AI_FEATURES=false\nENABLE_ANALYTICS=true\n\n# Third-party Integrations\nFIGMA_CLIENT_ID=\"your-figma-client-id\"\nFIGMA_CLIENT_SECRET=\"your-figma-client-secret\"\nGOOGLE_CLIENT_ID=\"your-google-oauth-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-google-oauth-client-secret\"\n\n# CDN and Asset Management\nCDN_URL=\"https://cdn.designstudio.com\"\nASSET_COMPRESSION_QUALITY=85\nENABLE_WEBP_CONVERSION=true\n\n# Backup and Disaster Recovery\nBACKUP_SCHEDULE=\"0 2 * * *\"\nBACKUP_RETENTION_DAYS=30\nBACKUP_S3_BUCKET=\"designstudio-backups-prod\"\n\n# Compliance and Security\nGDPR_COMPLIANCE=true\nDATA_RETENTION_DAYS=2555\nENCRYPTION_AT_REST=true\nAUDIT_LOGGING=true"
}